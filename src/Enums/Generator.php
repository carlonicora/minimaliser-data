<?php
namespace CarloNicora\Minimalism\MinimaliserData\Enums;

use CarloNicora\Minimalism\MinimaliserData\Objects\TableObject;

Enum Generator
{
    //AutoGenerated
    case AbstractBuilder;
    case AbstractIO;
    case AbstractCacheFactory;
    case DataObject;
    case AbstractValidatorCreate;
    case AbstractValidatorEdit;
    case Database;

    //Data
    case Builder;
    case IO;
    case CacheFactory;
    case ValidatorCreate;
    case ValidatorEdit;
    
    //Models
    case Model;
    case ChildModel;

    /**
     * @param TableObject $table
     * @return string
     */
    public function getFileName(
        TableObject $table,
    ): string
    {
        $response = match ($this){
            //AutoGenerated
            self::AbstractBuilder => 'Abstract' . $table->getObjectName() . 'Builder',
            self::AbstractIO => 'Abstract' . $table->getObjectName() . 'IO',
            self::AbstractCacheFactory => 'Abstract' . $table->getObjectNamePlural() . 'CacheFactory',
            self::DataObject => $table->getObjectName(),
            self::AbstractValidatorCreate => 'Abstract' . $table->getObjectName() . 'ValidatorCreate',
            self::AbstractValidatorEdit => 'Abstract' . $table->getObjectName() . 'ValidatorEdit',
            self::Database => $table->getObjectNamePlural() . 'Table',

            //Data
            self::Builder => $table->getObjectName() . 'Builder',
            self::IO => $table->getObjectName() . 'IO',
            self::CacheFactory => $table->getObjectNamePlural() . 'CacheFactory',
            self::ValidatorCreate => $table->getObjectName() . 'ValidatorCreate',
            self::ValidatorEdit => $table->getObjectName() . 'ValidatorEdit',
            
            //Models
            self::Model, self::ChildModel => $table->getObjectNamePlural(),
        };

        return $response . '.php';
    }

    public function overrides(
    ): bool {
        return match($this) {
            self::Builder, self::CacheFactory, self::IO, self::Model, self::ChildModel, self::ValidatorCreate, self::ValidatorEdit => false,
            default => true,
        };
    }

    /**
     * @param TableObject $table
     * @return string
     */
    public function getDataSubfolder(
        TableObject $table,
    ): string
    {
        $response = match ($this){
            self::AbstractBuilder, 
            self::AbstractIO, 
            self::AbstractCacheFactory,
            self::DataObject,
            self::AbstractValidatorCreate,
            self::AbstractValidatorEdit,
            self::Database
                => 'AutoGenerated' . DIRECTORY_SEPARATOR . 'Data' . DIRECTORY_SEPARATOR . $table->getObjectNamePlural(),
            
            self::Builder, 
            self::IO, 
            self::CacheFactory,
            self::ValidatorCreate,
            self::ValidatorEdit 
                => 'Data' . DIRECTORY_SEPARATOR . $table->getObjectNamePlural(),
            
            self::Model
                => 'Models',
            
            self::ChildModel
                => 'Models' . DIRECTORY_SEPARATOR . self::Model->name . DIRECTORY_SEPARATOR . $table->getObjectNamePlural(),
        };

        return $response . DIRECTORY_SEPARATOR;
    }

    /**
     * @return string
     */
    public function getTemplate(
    ): string
    {
        $response = 'Code' . DIRECTORY_SEPARATOR;
        $response .= match ($this){
            self::AbstractBuilder, 
            self::AbstractIO, 
            self::AbstractCacheFactory,
            self::DataObject,
            self::AbstractValidatorCreate,
            self::AbstractValidatorEdit,
            self::Database
                => 'AutoGenerated' . DIRECTORY_SEPARATOR . 'Data',
            
            self::Builder, 
            self::IO, 
            self::CacheFactory,
            self::ValidatorCreate,
            self::ValidatorEdit 
                => 'NoOverride' . DIRECTORY_SEPARATOR . 'Data',
            
            self::Model,
            self::ChildModel
                => 'NoOverride' . DIRECTORY_SEPARATOR . 'Models',
        };

        $response .= DIRECTORY_SEPARATOR . $this->name;

        return $response;
    }
}