<?php
namespace {{ meta.namespace }}AutoGenerated\Abstracts;

use BackedEnum;
use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\Minimalism\Services\Discovery\Discovery;
use CarloNicora\Minimalism\Factories\ObjectFactory;
use CarloNicora\Minimalism\Services\ResourceBuilder\ResourceBuilder;
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use {{ meta.namespace }}AutoGenerated\Enums\{{ meta.projectName }}Dictionary;
use CarloNicora\Minimalism\Interfaces\DictionaryInterface;
use CarloNicora\Minimalism\Services\Path;
use CarloNicora\Minimalism\Services\ResourceBuilder\Abstracts\AbstractResourceBuilder;
use Exception;
use UnitEnum;
{% if meta.imgix %}
use CarloNicora\Minimalism\Services\Imgix\Imgix;
{% endif %}

abstract class Abstract{{ meta.projectName }}ResourceBuilder extends AbstractResourceBuilder
{
    /** @var Abstract{{ meta.projectName }}DataObject  */
    protected Abstract{{ meta.projectName }}DataObject $data;

    /** @var string|null  */
    protected ?string $hash=null;

    /**
{% if meta.imgix %}
     * @param Imgix $imgix,
{% endif %}
     * @param EncrypterInterface $encrypter
     * @param Path $path
     */
    public function __construct(
{% if meta.imgix %}
        protected Imgix $imgix,
{% endif %}
        EncrypterInterface $encrypter,
        protected Path $path,
        protected readonly Discovery $discovery,
        protected readonly ObjectFactory $objectFactory,
        protected readonly ResourceBuilder $builder,
    )
    {
        parent::__construct($encrypter);
    }

    /**
     * @param {{ meta.projectName }}Dictionary $type
     * @return ResourceObject
     * @throws Exception
     */
    protected function create(
        {{ meta.projectName }}Dictionary $type,
    ): ResourceObject
    {
        $response = new ResourceObject(
            type: $type->value,
            id: $this->encrypter->encryptId($this->data->getId()),
        );

        $response->meta->add(name: 'createdAt', value: date('Y-m-d H:i:s', $this->data->getCreatedAt()));
        $response->meta->add(name: 'updatedAt', value: date('Y-m-d H:i:s', $this->data->getUpdatedAt()));

        $response->links->add(
            new Link(
                name: 'self',
                href: $this->path->getUrl()
                    . $type->getEndpoint()
                    . '/' . $this->encrypter->encryptId($this->data->getId())
                )
        );

        return $response;
    }

    /**
     * @param ResourceObject $resource
     * @param string $type
     * @param int|null $id
     * @param string|null $relationshipName
     * @return void
     * @throws Exception
     */
    protected function addSimplifiedRelationshipRelatedLink(
        ResourceObject $resource,
        string $type,
        ?int $id,
        string|null $relationshipName = null,
    ): void
    {
        if ($id !== null) {
            $href = $this->path->getUrl()
                . strtolower($type) . '/' . $this->encrypter->encryptId($id);
        } else {
            $href = $resource->links->get('self')->href
                . '/' . strtolower($type) . '/';
        }

        $resource->relationship($relationshipName ?? $type)->links->add(
            new Link(
                name: 'related',
                href: $href,
            )
        );
    }

    /**
     * @param ResourceObject $resource
     * @param {{ meta.projectName }}Dictionary|UnitEnum|string $type
     * @param int $id
     * @param {{ meta.projectName }}Dictionary|UnitEnum|string|null $childType
     * @param string|null $relationshipName
     * @return void
     * @throws Exception
     */
    protected function addRelationshipRelatedLink(
        ResourceObject $resource,
        {{ meta.projectName }}Dictionary|UnitEnum|string $type,
        int $id,
        {{ meta.projectName }}Dictionary|UnitEnum|string|null $childType=null,
        string|null $relationshipName=null,
    ): void
    {
        $childEndpoint = '';
        if ($childType !== null){
            $childEndpoint = '/';
            if (is_string($childType)){
                $relationshipName = $relationshipName ?? $childType;
                $childEndpoint .= $childType;
            } else {
                $relationshipName = $relationshipName ?? $childType->getPlural();
                $childEndpoint .= $childType->getEndpoint();
            }
        } elseif (is_string($type)){
            $relationshipName = $relationshipName ?? $type;
        } else {
            $relationshipName = $relationshipName ?? $type->value;
        }

        if (is_string($type)){
            $typeEndpoint = $type;
        } else {
            $typeEndpoint = $type->getEndpoint();
        }

        $resource->relationship($relationshipName)->links->add(
            new Link(
                name: 'related',
                href: $this->path->getUrl()
                    . $typeEndpoint
                    . '/' . $this->encrypter->encryptId($id)
                    . $childEndpoint
            )
        );
    }

    /**
     * @param {{ meta.projectName }}Dictionary $currentType
     * @param ResourceObject $resource
     * @param DictionaryInterface|BackedEnum $childType
     * @return void
     * @throws Exception
     */
    protected function addChildLink(
        {{ meta.projectName }}Dictionary $currentType,
        ResourceObject $resource,
        DictionaryInterface|BackedEnum $childType,
    ): void {
        $resource->relationship($childType->value)->links->add(
            new Link(
                name: 'related',
                href: $this->path->getUrl()
                    . $childType->getEndpoint()
                    . '?' . $currentType->getIdKey() . '=' . $this->encrypter->encryptId($this->data->getId())
            )
        );
    }
}