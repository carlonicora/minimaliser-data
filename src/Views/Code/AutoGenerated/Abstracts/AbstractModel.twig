<?php
namespace {{ meta.namespace }}AutoGenerated\Abstracts;

use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\Minimalism\Abstracts\AbstractModel;
use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use CarloNicora\Minimalism\Exceptions\MinimalismException;
use CarloNicora\Minimalism\Factories\MinimalismFactories;
use CarloNicora\Minimalism\Interfaces\Security\Interfaces\SecurityInterface;
use CarloNicora\Minimalism\Services\ResourceBuilder\ResourceBuilder;
use CarloNicora\Minimalism\Services\Discovery\Discovery;
use {{ meta.namespace }}Api;
use CarloNicora\Minimalism\Services\Path;
use Exception;

abstract class Abstract{{ meta.projectName }}Model extends AbstractModel
{
    /** @var Api  */
    protected Api $api;

    /** @var ResourceBuilder  */
    protected ResourceBuilder $builder;

    /** @var EncrypterInterface  */
    protected EncrypterInterface $encrypter;

    /** @var Discovery  */
    protected Discovery $discovery;

    /** @var SecurityInterface  */
    protected SecurityInterface $authorisation;

    /** @var Path  */
    protected Path $path;

    /** @var array */
    protected array $freeMethods = [];

    /**
     * @param MinimalismFactories $minimalismFactories
     * @param string|null $function
     * @throws MinimalismException
     */
    public function __construct(
        MinimalismFactories $minimalismFactories,
        ?string $function = null,
    )
    {
        parent::__construct($minimalismFactories,$function);

        $this->path = $minimalismFactories->getServiceFactory()->create(Path::class);
        $this->authorisation = $minimalismFactories->getServiceFactory()->create(SecurityInterface::class);
        $this->api = $minimalismFactories->getServiceFactory()->create(Api::class);
        $this->builder = $minimalismFactories->getServiceFactory()->create(ResourceBuilder::class);
        $this->encrypter = $minimalismFactories->getServiceFactory()->create(EncrypterInterface::class);
        $this->discovery = $minimalismFactories->getServiceFactory()->create(Discovery::class);

        if (($this->function !== null && !in_array($this->function, $this->freeMethods, true)) && !$this->authorisation->getUserId()){
            throw new MinimalismException(status: HttpCode::Unauthorized);
        }
    }

    /**
     * @param array|null $page
     */
    protected function updatePaginationIds(
        ?array &$page,
    ): void
    {
        if ($page === null){
            return;
        }

        if (array_key_exists('before', $page)){
            $page['before'] = $this->encrypter->decryptId($page['before']);
        }

        if (array_key_exists('after', $page)){
            $page['after'] = $this->encrypter->decryptId($page['after']);
        }
    }

    /**
    * @param array|null $page
    * @return void
    * @throws Exception
    */
    protected function addPagination(
        ?array $page=null,
    ): void
    {
        $size = 25;
        $currentId = $this->document->resources[count($this->document->resources) - 1]->id;
        $url = $this->path->getUrl() . substr($this->path->getUri(), 1);
        $url .= (str_contains(haystack: $url, needle: '?')) ? '&' : '?';

        if ($page !== null && array_key_exists('before', $page)){
            $this->document->links->add(
                new Link(
                    name: 'previous',
                    href: $url .
                        $this->createPaginationString(
                            size: $size,
                            before: $currentId,
                            after: $page['before']
                        ),
                )
            );
        }

        $this->document->links->add(
            new Link(
                name: 'first',
                href: substr($url, 0, -1),
            )
        );

        if (count($this->document->resources) === $size) {
            $this->document->links->add(
                new Link(
                    name: 'next',
                    href: $url .
                        $this->createPaginationString(
                            size: $size,
                            after: $currentId,
                        ),
                )
            );
        }
    }

    /**
    * @param int $size
    * @param string|null $before
    * @param string|null $after
    * @return string
    */
    private function createPaginationString(
        int $size,
        ?string $before=null,
        ?string $after=null,
    ): string
    {
        $response = 'page[size]=' . $size;

        if ($before !== null){
            $response .= '&page[before]=' . $before;
        }

        if ($after !== null){
            $response .= '&page[after]=' . $after;
        }

        return $response;
    }
}