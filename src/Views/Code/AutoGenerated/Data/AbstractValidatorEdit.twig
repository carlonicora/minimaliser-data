<?php
namespace {{ data.attributes.namespace }}AutoGenerated\Data\{{ data.attributes.objectNamePlural }};

use CarloNicora\Minimalism\Services\DataValidator\Abstracts\AbstractDataValidator;
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use CarloNicora\Minimalism\Services\DataValidator\Objects\AttributeValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\DocumentValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\ResourceValidator;
use CarloNicora\Minimalism\Services\DataValidator\Enums\DataTypes;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}IO;
use Exception;

abstract class Abstract{{ data.attributes.objectName }}ValidatorEdit extends AbstractDataValidator
{
    /**
     *
     */
    public function __construct(
        protected readonly EncrypterInterface $encrypter,
        protected readonly {{ data.attributes.objectName }}IO $dataReader,
    )
    {
        $this->documentValidator = new DocumentValidator();

        $resourceValidator = new ResourceValidator(type: '{{ data.attributes.objectName | lower }}', isIdRequired: true);

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
        $resourceValidator->addAttributeValidator(new AttributeValidator(name: '{{ field.meta.FK.field }}'));
{% else %}
        $resourceValidator->addAttributeValidator(new AttributeValidator(name: '{{ field.attributes.name }}'{% if field.meta.isForeignKey is not defined %}{% if field.attributes.phpType == 'int' %},type: DataTypes::int{% elseif field.attributes.phpType == 'float' %},type: DataTypes::float{% elseif field.attributes.phpType == 'bool' %},type: DataTypes::bool{% endif%}{% endif %}));
{% endif %}{% endif %}{% endfor %}

        $this->documentValidator->addResourceValidator(
            validator: $resourceValidator
        );
    }

    /**
    * @return bool
    * @throws Exception
    */
    public function validateData(
    ): bool
    {
        $this->getDocument()->getSingleResource()->id = $this->encrypter->decryptId($this->getDocument()->getSingleResource()->id);
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt' and field.meta.FK %}

        if ($this->getDocument()->getSingleResource()->attributes->has(name: '{{ field.meta.FK.field }}')){
            $this->getDocument()->getSingleResource()->attributes->update(
                name: '{{ field.meta.FK.field }}',
                value: $this->encrypter->decryptId(
                    $this->getDocument()->getSingleResource()->attributes->get(name: '{{ field.meta.FK.field }}'),
                ),
            );
        }
{% endif %}
{% endfor %}

        $this->dataObject = $this->dataReader->readById($this->getDocument()->getSingleResource()->id);

        return true;
    }
}