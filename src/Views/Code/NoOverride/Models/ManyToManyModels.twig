<?php
namespace {{ data.attributes.namespace }}Models\{{ data.meta.source.tableCapitalised }};

use CarloNicora\Minimalism\ApiCaller\ApiCaller;
use CarloNicora\Minimalism\ApiCaller\Data\ApiRequest;
use CarloNicora\Minimalism\ApiCaller\Enums\Verbs;
use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Enums\HttpCache;
use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\Minimalism\Interfaces\Encrypter\Parameters\PositionedEncryptedParameter;
use CarloNicora\Minimalism\Interfaces\Encrypter\Parameters\EncryptedParameter;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}IO;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectName }};
{% if data.meta.destination.isExistingTable %}
use {{ data.attributes.namespace }}Data\{{ data.meta.destination.tableCapitalised }}\{{ data.meta.destination.tableSingularCapitalised }}Builder;
use {{ data.attributes.namespace }}Data\{{ data.meta.destination.tableCapitalised }}\{{ data.meta.destination.tableSingularCapitalised }}IO;
{% endif %}
use {{ data.attributes.namespace }}Models\Abstracts\Abstract{{ data.attributes.project }}Model;
use Exception;

class {{ data.meta.destination.tableCapitalised }} extends Abstract{{ data.attributes.project }}Model
{
    /** @var HttpCache  */
    protected HttpCache $httpCache = HttpCache::Cache;

    /** @var int  */
    protected int $httpCacheExpiration = 60*60*24;

    /**
     * @param PositionedEncryptedParameter ${{ data.meta.source.field }}
     * @param array|null $page
     * @return HttpCode
     * @throws Exception
     */
    public function get(
        PositionedEncryptedParameter ${{ data.meta.source.field }},
        ?array $page=null,
    ): HttpCode
    {
        $this->updatePaginationIds($page);

{% if data.meta.destination.isExistingTable %}
        ${{ data.meta.destination.table }} = $this->objectFactory->create({{ data.meta.destination.tableSingularCapitalised }}IO::class)->readBy{{ data.meta.source.fieldCapitalised }}({{ data.meta.source.field }}: ${{ data.meta.source.field }}->getValue(), page: $page);

        $this->document->addResourceList(
            $this->builder->buildResources(
                builderClass: {{ data.meta.destination.tableSingularCapitalised }}Builder::class,
                data: ${{ data.meta.destination.table }},
            )
        );

        $this->addPagination($page);
{% else %}
        $url = '';
        $endpoint = $this->discovery->getEndpointUrl('{{ data.meta.destination.table }}', $url, $hostname);

        ${{ data.meta.source.tableSingular }}{{ data.meta.destination.tableCapitalised }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->readBy{{ data.meta.source.fieldCapitalised }}(${{ data.meta.source.field }}->getValue());
        $ids = ['ids'=>[]];
        foreach(${{ data.meta.source.tableSingular }}{{ data.meta.destination.tableCapitalised }} as ${{ data.meta.source.tableSingular }}{{ data.meta.destination.tableSingularCapitalised }}){
            $ids['ids'][] = $this->encrypter->encryptId(${{ data.meta.source.tableSingular }}{{ data.meta.destination.tableSingularCapitalised }}->get{{ data.meta.destination.fieldCapitalised }}());
        }

        $endpoint .= '/?' . http_build_query($ids);
        if ($page !== null){
            $endpoint .= '?page=' . http_build_query($page);
        }

        $response = (new ApiCaller())->call(
            new ApiRequest(
                verb: Verbs::Get,
                endpoint: $endpoint,
                bearer: explode(' ', $_ENV['HTTP_AUTHORIZATION'])[1],
            ),
            serverUrl: $url,
            hostName: $hostname,
        );

        $this->document = $response->getResponse();
{% endif %}

        return HttpCode::Ok;
    }

    /**
     * @param PositionedEncryptedParameter ${{ data.meta.source.field }}
     * @param PositionedEncryptedParameter ${{ data.meta.destination.field }}
     * @return HttpCode
     * @throws Exception
     */
    public function post(
        PositionedEncryptedParameter ${{ data.meta.source.field }},
        PositionedEncryptedParameter ${{ data.meta.destination.field }},
    ): HttpCode
    {
        $data = new {{ data.attributes.objectName }}();
        $data->set{{ data.meta.source.fieldCapitalised }}(${{ data.meta.source.field }}->getValue());
        $data->set{{ data.meta.destination.fieldCapitalised }}(${{ data.meta.destination.field }}->getValue());
        $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->insert($data);

        return HttpCode::Created;
    }

    /**
     * @param PositionedEncryptedParameter ${{ data.meta.source.field }}
     * @param PositionedEncryptedParameter ${{ data.meta.destination.field }}
     * @return HttpCode
     * @throws Exception
     */
    public function delete(
        PositionedEncryptedParameter ${{ data.meta.source.field }},
        PositionedEncryptedParameter ${{ data.meta.destination.field }},
    ): HttpCode
    {
        $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->deleteBy{{ data.meta.source.fieldCapitalised }}{{ data.meta.destination.fieldCapitalised }}(${{ data.meta.source.field }}->getValue(), ${{ data.meta.destination.field }}->getValue());

        return HttpCode::NoContent;
    }
}