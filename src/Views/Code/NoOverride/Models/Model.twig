<?php
namespace {{ data.attributes.namespace }}Models;

use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Enums\HttpCache;
use CarloNicora\Minimalism\Exceptions\MinimalismException;
use CarloNicora\Minimalism\Interfaces\Encrypter\Parameters\EncryptedParameter;
use CarloNicora\Minimalism\Interfaces\Encrypter\Parameters\PositionedEncryptedParameter;
use CarloNicora\Minimalism\Services\ResourceBuilder\Interfaces\ResourceableDataInterface;
use {{ data.attributes.namespace }}AutoGenerated\Abstracts\Abstract{{ data.attributes.project }}Model;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}Builder;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}IO;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}ValidatorCreate;
{% if data.attributes.isManyToMany == false %}
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }}ValidatorEdit;
{% endif %}
use {{ data.attributes.namespace }}AutoGenerated\Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectName }};
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectNamePlural }}CacheFactory;
use Exception;

class {{ data.attributes.objectNamePlural }} extends Abstract{{ data.attributes.project }}Model
{
    /** @var HttpCache  */
    protected HttpCache $httpCache = HttpCache::Cache;

    /** @var int  */
    protected int $httpCacheExpiration = 60*60*24;

    /**
{% if data.attributes.isManyToMany == false %}
     * @param PositionedEncryptedParameter|null $id
     * @param string[]|null $ids
     * @param array|null $page
{% else %}
     * @param PositionedEncryptedParameter $id
{% endif %}
     * @return HttpCode
     * @throws Exception
     */
    public function get(
{% if data.attributes.isManyToMany == false %}
        ?PositionedEncryptedParameter $id=null,
        ?array $ids=null,
        ?array $page=null,
{% else %}
        PositionedEncryptedParameter $id,
{% endif %}
    ): HttpCode
    {
{% if data.attributes.isManyToMany == false %}
        $this->updatePaginationIds($page);

        if ($id !== null){
{% if data.attributes.objectNamePlural == 'Users' %}
            if ($id->getEncryptedValue() === 'me'){
                $this->httpCache = HttpCache::NoCache;
                $this->readSingle($this->authorisation->getUserId());
            } else {
                $this->readSingle($id->getValue());
            }
{% else %}
            $this->readSingle($id->getValue());
{% endif %}
        } else {
            $this->readList($ids, $page);
        }
{% else %}
        $this->readSingle($id->getValue());
{% endif %}

        return HttpCode::Ok;
    }

    /**
     * @param int $id
     * @return void
     * @throws Exception
     */
    private function readSingle(
        int $id,
    ): void
    {
        ${{ data.attributes.objectName | lower }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->readById(id: $id);

        $this->document->addResource(
            $this->builder->buildResource(
                builderClass: {{ data.attributes.objectName }}Builder::class,
                data: ${{ data.attributes.objectName | lower }},
                cacheBuilder: {{ data.attributes.objectNamePlural }}CacheFactory::{{ data.attributes.objectName | lower }}($id),
            )
        );
    }
{% if data.attributes.isManyToMany == false %}

    /**
     * @param string[]|null $ids
     * @param array|null $page
     * @return void
     * @throws Exception
     */
    private function readList(
        ?array $ids,
        ?array $page,
    ): void
    {
        $this->updatePaginationIds($page);

        if ($ids !== null){
            $listOfIds = [];
            foreach ($ids as $id){
                $listOfIds[] = $this->encrypter->decryptId($id);
            }
            ${{ data.attributes.objectNamePlural | lower }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->readByIds(ids: $listOfIds, page: $page);
        } else {
            ${{ data.attributes.objectNamePlural | lower }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->readList(page: $page);
        }

        $this->document->addResourceList(
            $this->builder->buildResources(
                builderClass: {{ data.attributes.objectName }}Builder::class,
                data: ${{ data.attributes.objectNamePlural | lower }},
            )
        );

        $this->addPagination($page);
    }
{% endif %}

    /**
     * @param {{ data.attributes.objectName }}ValidatorCreate $payload
     * @return HttpCode
     * @throws Exception
     */
    public function post(
        {{ data.attributes.objectName }}ValidatorCreate $payload,
    ): HttpCode
    {
        /** @var {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower }} */
        ${{ data.attributes.objectName | lower }} = $this->builder->ingestResource(
            dataClass: {{ data.attributes.objectName }}Builder::class,
            resource: $payload->getSingleResource(),
        );

        ${{ data.attributes.objectName | lower }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->insert(
            {{ data.attributes.objectName | lower }}: ${{ data.attributes.objectName | lower }},
        );

        $this->document->addResource(
            $this->builder->buildResource(
                builderClass: {{ data.attributes.objectName }}Builder::class,
                data: ${{ data.attributes.objectName | lower }},
            )
        );

        return HttpCode::Created;
    }
{% if data.attributes.isManyToMany == false %}

    /**
     * @param PositionedEncryptedParameter $id
     * @param {{ data.attributes.objectName }}ValidatorEdit $payload
     * @return HttpCode
     * @throws Exception
     */
    public function patch(
        PositionedEncryptedParameter $id,
        {{ data.attributes.objectName }}ValidatorEdit $payload,
    ): HttpCode
    {
        /** @var {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower }} */
        ${{ data.attributes.objectName | lower }} = $payload->getDataObject();

        if (${{ data.attributes.objectName | lower }}->getId() !== $id->getValue()){
            throw new MinimalismException(status: HttpCode::PreconditionFailed, message: 'Id does not match payload id');
        }

        /** @noinspection UnusedFunctionResultInspection */
        $this->builder->ingestResource(
            dataClass: {{ data.attributes.objectName }}Builder::class,
            resource: $payload->getSingleResource(),
            dataObject: ${{ data.attributes.objectName | lower }},
        );

        $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->update{{ data.attributes.objectName }}(
            {{ data.attributes.objectName | lower }}: ${{ data.attributes.objectName | lower }},
        );

        $this->document->addResource(
            $this->builder->buildResource(
                builderClass: {{ data.attributes.objectName }}Builder::class,
                data: ${{ data.attributes.objectName | lower }},
            )
        );

        return HttpCode::Ok;
    }
{% endif %}

    /**
     * @param PositionedEncryptedParameter $id
     * @return HttpCode
     * @throws MinimalismException|Exception
     */
    public function delete(
        PositionedEncryptedParameter $id,
    ): HttpCode
    {
        ${{ data.attributes.objectName | lower }} = $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->readById($id->getValue());
        $this->objectFactory->create({{ data.attributes.objectName }}IO::class)->deleteById(${{ data.attributes.objectName | lower }}->getId());

        return HttpCode::NoContent;
    }
}