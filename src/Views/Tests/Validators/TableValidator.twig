<?php
namespace {{ meta.namespace }}Tests\Validators;

use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\Minimalism\TestSuite\Enums\ResourceElements;
use {{ meta.namespace }}Enums\{{ meta.projectName }}Dictionary;
use {{ meta.namespace }}Tests\Abstracts\AbstractValidator;

class {{ data.attributes.objectName }}Validator extends AbstractValidator
{
    /**
     * @param ResourceObject ${{ data.attributes.objectName | lower }}
     * @return void
     */
    public static function validate(
        ResourceObject ${{ data.attributes.objectName | lower }},
    ): void
    {
        self::assertEquals(expected: {{ meta.projectName }}Dictionary::{{ data.attributes.objectName }}->value, actual: ${{ data.attributes.objectName | lower }}->type);
        self::assertNotNull(actual: ${{ data.attributes.objectName | lower }}->id);

        self::validateResourceElement(ResourceElements::Meta, ${{ data.attributes.objectName | lower }}, ['createdAt','updatedAt']);
        self::validateResourceElement(ResourceElements::Attribute, ${{ data.attributes.objectName | lower }}, [
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{%if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt' and field.attributes.name != 'image'%}
{% if field.meta.FK == null %}
            '{{ field.attributes.name }}',
{% endif %}
{% endif %}
{% endfor %}
        ]);
        self::validateResourceElement(ResourceElements::Link, ${{ data.attributes.objectName | lower }}, [
            'self',
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.attributes.name == 'image' %}
            'image',
{% endif %}
{% endfor %}
        ]);
        self::validateResourceElement(ResourceElements::Relationship, ${{ data.attributes.objectName | lower }}, [
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.FK %}
            '{{ field.meta.FK.tableSingular|lower }}',
{% endif %}
{% endfor %}
{% for externalFkTable in data.meta.externalFkTables %}
            '{{ externalFkTable.name|lower }}',
{% endfor %}
        ]);
    }

    /**
     * @param ResourceObject ${{ data.attributes.objectName | lower }}
     * @return void
     */
    public static function validateListOnly(
        ResourceObject ${{ data.attributes.objectName | lower }},
    ): void
    {
        self::assertEquals(expected: {{ meta.projectName }}Dictionary::{{ data.attributes.objectName }}->value, actual: ${{ data.attributes.objectName | lower }}->type);
        self::assertNotNull(actual: ${{ data.attributes.objectName | lower }}->id);
        self::validateResourceElement(ResourceElements::Link, ${{ data.attributes.objectName | lower }}, ['self']);
        self::assertEquals(expected: 0, actual: ${{ data.attributes.objectName | lower }}->attributes->count());
    }
}