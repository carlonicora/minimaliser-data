<?php
namespace {{ meta.namespace }}Tests\Data\{{ meta.database }};

use CarloNicora\Minimalism\Interfaces\Sql\Interfaces\SqlDataObjectInterface;
use {{ meta.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectNamePlural }}Table;
use {{ meta.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectName }};
use CarloNicora\Minimalism\TestSuite\Interfaces\TableDataInterface;

enum {{ data.attributes.objectNamePlural }}Data: int implements TableDataInterface
{
    case Value1=1;
    case Value2=2;
    case Value3=3;

    /**
     * @return string
     */
    public static function getTableClass(
    ): string
    {
        return {{ data.attributes.objectNamePlural }}Table::class;
    }

    /**
     * @return SqlDataObjectInterface
     */
    public function row(
    ): SqlDataObjectInterface
    {
        return match($this) {
{% set boolValue=true %}
{% for i in 1..3 %}
            self::Value{{ i }} => $this->map(
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
                {{ field.meta.FK.field }}: {{ i }},
{% elseif field.meta.enumValues %}
                {{ field.attributes.name }}: '{{ field.meta.enumValues[ i % field.meta.enumValues|length ] }}',
{% else %}
                {{ field.attributes.name }}: {% if field.attributes.phpType == 'string' %}'{{ field.attributes.name }}{{ i }}'{% elseif field.attributes.phpType == 'bool' %}{% if boolValue == true %}true{% set boolValue = false %}{% else %}false{% set boolValue = true %}{% endif %}{% else %}{% if field.meta.DbFieldType == 'DbFieldType::IntDateTime' %}time(){% else %}{{ i }}{% endif %}{% endif %},
{% endif %}
{% endif %}
{% endfor %}
            ),
{% endfor %}
        };
    }

    /**
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
    * @param int ${{ field.meta.FK.field }}
{% else %}
    * @param {{ field.attributes.phpType }} ${{ field.attributes.name }}
{% endif %}
{% endif %}
{% endfor %}
    * @return {{ data.attributes.objectName}}
    */
    private function map(
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
        {{ field.attributes.phpType }} ${{ field.meta.FK.field }},
{% else %}
        {{ field.attributes.phpType }} ${{ field.attributes.name }},
{% endif %}
{% endif %}
{% endfor %}
    ): {{ data.attributes.objectName}}
    {
        $response = new {{ data.attributes.objectName}}();
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
        $response->set{{ field.meta.FK.fieldCapitalised}}(${{ field.meta.FK.field }});
{% else %}
        $response->set{% if field.meta.isId %}Id($this->value){% else %}{{ field.meta.capitalisedName}}(${{ field.attributes.name }}){% endif %};
{% endif %}
{% endif %}
{% endfor %}

        return $response;
    }
}