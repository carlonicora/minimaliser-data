<?php
namespace {{ meta.namespace }}Tests\Functional\{{ data.attributes.objectNamePlural}};

use CarloNicora\Minimalism\Enums\HttpCode;
use {{ meta.namespace }}Tests\Abstracts\AbstractFunctionalTest;
use {{ meta.namespace }}Tests\Data\{{ meta.database }}\{{ data.attributes.objectNamePlural }}Data;
use Exception;
use {{ meta.namespace }}Tests\Validators\{{ data.attributes.objectName }}Validator;

class Get{{ data.attributes.objectNamePlural }} extends AbstractFunctionalTest
{
    /**
     * @test
     * @return void
     * @throws Exception
     * @covers \{{ meta.namespace }}Models\{{ data.attributes.objectNamePlural }}::get()
     */
    public function SHOULD_Return{{ data.attributes.objectNamePlural }}_WHEN_UserRequests{{ data.attributes.objectNamePlural }}(
    ): void
    {
        $response = $this->runApiCall(
            expectedResult: HttpCode::Ok,
        );

        foreach ($response->getResources() as $resource) {
            {{ data.attributes.objectName }}Validator::validate($resource);
        }
    }

    /**
    * @test
    * @return void
    * @throws Exception
    * @covers \{{ meta.namespace }}Models\{{ data.attributes.objectNamePlural }}::get()
    */
    public function SHOULD_Return{{ data.attributes.objectName }}_WHEN_UserRequests{{ data.attributes.objectName }}(
    ): void
    {
        $response = $this->runApiCall(
            expectedResult: HttpCode::Ok,
            endpointParams: [{{ data.attributes.objectNamePlural }}Data::Value1->value],
        );

        self::assertEquals(expected: 1, actual: $response->getResourceCount());

        {{ data.attributes.objectName }}Validator::validate($response->getFirstResource());
    }
}