<?php
namespace {{ meta.namespace }}Tests\Functional\{{ data.attributes.objectNamePlural}};

use CarloNicora\JsonApi\Document;
use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Services\Encrypter\Encrypter;
use CarloNicora\Minimalism\TestSuite\Factories\MinimalismServiceFactory;
use {{ meta.namespace }}Enums\{{ meta.projectName }}Dictionary;
use {{ meta.namespace }}Tests\Abstracts\AbstractFunctionalTest;
use {{ meta.namespace }}Tests\Validators\{{ data.attributes.objectName }}Validator;
use Exception;

class Post{{ data.attributes.objectNamePlural }} extends AbstractFunctionalTest
{
    /**
     * @return Document[][]
     * @throws Exception
     */
    public function data(
    ): array
    {
        ${{ data.attributes.objectName | lower }}Document = new Document();
        ${{ data.attributes.objectName | lower }} = new ResourceObject(
            type: LinkneticDictionary::{{ data.attributes.objectName }}->value,
        );

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
        ${{ data.attributes.objectName | lower }}->attributes->add(name: '{{ field.attributes.name}}', value: {% if field.attributes.phpType == 'string' %}'{{ field.attributes.name }}4'{% elseif field.attributes.phpType == 'bool' %}true{% else %}{% if field.meta.DbFieldType == 'DbFieldType::IntDateTime' %}time(){% else %}{% if field.meta.isForeignKey == true %}MinimalismServiceFactory::create(Encrypter::class)->encryptId(1){% else %}4{%endif%}{% endif %}{% endif %});
{% endif %}{% endif %}{% endfor %}

        ${{ data.attributes.objectName | lower }}Document->addResource(${{ data.attributes.objectName | lower }});

        return [
            '{{ data.attributes.objectName | lower }}' => [
                ${{ data.attributes.objectName | lower }}Document
            ]
        ];
    }

    /**
    * @test
    * @return void
    * @throws Exception
    * @covers \Linknetic\Minimalism\Api\Models\{{ data.attributes.objectNamePlural }}::post()
    */
    public function SHOULD_Return412_WHEN_UserCreates{{ data.attributes.objectName }}WithoutPayload(
    ): void
    {
        /** @noinspection UnusedFunctionResultInspection */
        $this->runApiCall(
            expectedResult: HttpCode::PreconditionFailed,
        );
    }

    /**
    * @test
    * @param Document $document
    * @dataProvider data
    * @return void
    * @throws Exception
    * @covers \Linknetic\Minimalism\Api\Models\{{ data.attributes.objectNamePlural }}::post()
    */
    public function SHOULD_Return{{ data.attributes.objectName }}_WHEN_UserCreates{{ data.attributes.objectName }}(
        Document $document,
    ): void
    {
        $response = $this->runApiCall(
            expectedResult: HttpCode::Created,
            payload: $document,
        );

        foreach ($response->getResources() as $resource) {
            {{ data.attributes.objectName }}Validator::validate($resource);
        }
    }
}