<?php
namespace {{ meta.namespace }}Models\Abstracts;

use CarloNicora\Minimalism\Abstracts\AbstractModel;
use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use CarloNicora\Minimalism\Exceptions\MinimalismException;
use CarloNicora\Minimalism\Factories\MinimalismFactories;
use CarloNicora\Minimalism\Interfaces\Security\Interfaces\SecurityInterface;
use CarloNicora\Minimalism\Services\ResourceBuilder\ResourceBuilder;
use {{ meta.namespace }}Api;

abstract class Abstract{{ meta.projectName }}Model extends AbstractModel
{
    /** @var Api  */
    protected Api $api;

    /** @var ResourceBuilder  */
    protected ResourceBuilder $builder;

    /** @var EncrypterInterface  */
    protected EncrypterInterface $encrypter;

    /** @var SecurityInterface  */
    protected SecurityInterface $authorisation;

    /**
     * @param MinimalismFactories $minimalismFactories
     * @param string|null $function
     * @throws MinimalismException
     */
    public function __construct(
        MinimalismFactories $minimalismFactories,
        ?string $function = null,
    )
    {
        parent::__construct($minimalismFactories,$function);

        $this->authorisation = $minimalismFactories->getServiceFactory()->create(SecurityInterface::class);
        $this->api = $minimalismFactories->getServiceFactory()->create(Api::class);
        $this->builder = $minimalismFactories->getServiceFactory()->create(ResourceBuilder::class);
        $this->encrypter = $minimalismFactories->getServiceFactory()->create(EncrypterInterface::class);

        if (!$this->authorisation->getUserId()){
            throw new MinimalismException(status: HttpCode::Unauthorized);
        }
    }

    /**
    * @param array|null $page
    * @return array|null
    */
    protected function decryptPagination(
        ?array $page,
    ): ?array
    {
        if ($page === null){
            return null;
        }

        if (array_key_exists('before', $page)){
            $page['before'] = $this->encrypter->decryptId($page['before']);
        }

        if (array_key_exists('after', $page)){
            $page['after'] = $this->encrypter->decryptId($page['after']);
        }

        return $page;
    }
}