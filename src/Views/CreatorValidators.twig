{% set fieldExist = false %}
{% for fieldIdentifier in data.relationships['fields'].data %}
{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false%}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}{% if field.meta.isForeignKey %}
{% set fieldExist = true %}
{% set break = true %}
{% endif %}{% endif %}{% endif %}
{% endfor %}
<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated;

use CarloNicora\Minimalism\Services\DataValidator\Abstracts\AbstractDataValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\AttributeValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\DocumentValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\ResourceValidator;
use CarloNicora\Minimalism\Services\DataValidator\Enums\DataTypes;
{% if fieldExist == true%}
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use Exception;
{% endif %}

class {{ data.attributes.objectName }}CreateValidator extends AbstractDataValidator
{
    /**
     *
     */
    public function __construct(
{% if fieldExist == true%}
        private readonly EncrypterInterface $encrypter,
{% endif %}
    )
    {
        $this->documentValidator = new DocumentValidator();

        $resourceValidator = new ResourceValidator(type: '{{ data.attributes.objectName | lower }}');

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
        $resourceValidator->addAttributeValidator(new AttributeValidator(name: '{{ field.attributes.name }}'{% if field.attributes.isNullable == false %}, isRequired: true{% endif %}{% if field.meta.isForeignKey is not defined %}{% if field.attributes.phpType == 'int' %},type: DataTypes::int{% elseif field.attributes.phpType == 'bool' %},type: DataTypes::bool{% endif%}{% endif %}));
{% endif %}{% endif %}{% endfor %}

        $this->documentValidator->addResourceValidator(
                validator: $resourceValidator
        );
    }
{% if fieldExist == true%}

    /**
    * @return bool
    * @throws Exception
    */
    public function validateData(
    ): bool
    {
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}{% if field.meta.isForeignKey %}
        $this->getDocument()->getSingleResource()->attributes->update(
                name: '{{ field.attributes.name }}',
                value: $this->encrypter->decryptId(
                        $this->getDocument()->getSingleResource()->attributes->get(name: '{{ field.attributes.name }}'),
                ),
        );

{% endif %}{% endif %}{% endif %}{% endfor %}
        return true;
    }
{% endif %}
}