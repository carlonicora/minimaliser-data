<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\Validators;

use CarloNicora\Minimalism\Services\DataValidator\Abstracts\AbstractDataValidator;
use CarloNicora\Minimalism\Interfaces\Encrypter\Interfaces\EncrypterInterface;
use CarloNicora\Minimalism\Services\DataValidator\Objects\AttributeValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\DocumentValidator;
use CarloNicora\Minimalism\Services\DataValidator\Objects\ResourceValidator;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\IO\{{ data.attributes.objectName }}IO;
use Exception;

class {{ data.attributes.objectName }}EditValidator extends AbstractDataValidator
{
    /**
     *
     */
    public function __construct(
        private readonly EncrypterInterface $encrypter,
        private readonly {{ data.attributes.objectName }}IO $dataReader,
    )
    {
        $this->documentValidator = new DocumentValidator();

        $resourceValidator = new ResourceValidator(type: '{{ data.attributes.objectNamePlural }}', isIdRequired: true);

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}
        $resourceValidator->addAttributeValidator(new AttributeValidator(name: '{{ field.id }}'));
{% endif %}{% endfor %}

        $this->documentValidator->addResourceValidator(
            validator: $resourceValidator
        );
    }

    /**
    * @return bool
    * @throws Exception
    */
    public function validateData(
    ): bool
    {
        $this->dataObject = $this->dataReader->readById($this->encrypter->decryptId($this->getDocument()->resources[0]->id));

        return true;
    }
}