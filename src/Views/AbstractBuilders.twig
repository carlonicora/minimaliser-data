<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\Abstracts;

use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\Minimalism\Enums\HttpCode;
use {{ data.attributes.namespace }}Data\Abstracts\Abstract{{ data.attributes.project }}ResourceBuilder;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectName }};
use {{ data.attributes.namespace }}Enums\{{ data.attributes.project }}Dictionary;
use CarloNicora\Minimalism\Services\ResourceBuilder\Interfaces\ResourceableDataInterface;
use CarloNicora\Minimalism\Exceptions\MinimalismException;
use Exception;

abstract class Abstract{{ data.attributes.objectName }}Builder extends Abstract{{ data.attributes.project }}ResourceBuilder
{
    /**
     * @param int $id
     * @return ResourceObject
     * @throws Exception
     */
    public function buildMinimalResource(
        int $id
    ): ResourceObject {
        $response = new ResourceObject({{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }}->value, $this->encrypter->encryptId($id));

        $response->links->add(
            new Link(
                name: 'self',
                href: $this->path->getUrl()
                . {{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }}->getEndpoint()
                . '/' . $this->encrypter->encryptId($id)
            )
        );

        return $response;
    }

    /**
     * @param {{ data.attributes.objectName }} $data
     * @return ResourceObject
     * @throws Exception
     */
    public function buildResource(
        ResourceableDataInterface $data,
    ): ResourceObject
    {
        $this->data = $data;

        $response = $this->create({{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }});
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and not field.meta.FK and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt' and field.attributes.name != 'avatar'%}

        $response->attributes->add(
            name: '{{ field.attributes.name }}',
            value: {% if field.meta.isForeignKey %}$this->encrypter->encryptId({% endif %}$data->get{{ field.meta.capitalisedName }}(){% if field.meta.isForeignKey %}){% endif %},
        );
{% endif %}
{% endfor %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.attributes.name == 'avatar' %}

        $response->links->add(
            new Link(
                name: 'avatar',
{% if data.meta.imgix %}
                href: $this->imgix->generateSignedUrl($data->get{{ field.attributes.name|capitalize }}()),
{% else %}
                href: $data->get{{ field.attributes.name|capitalize }}(),
{% endif %}
            )
        );
{% endif %}
{% if field.meta.FK %}

        $this->addSimplifiedRelationshipRelatedLink(
            resource: $response,
            type: '{{ field.meta.FK.table|lower }}',
            id: $data->get{{ field.meta.FK.fieldCapitalised }}(),
            relationshipName: '{{ field.meta.FK.tableSingular|lower }}',
        );
{% endif %}
{% endfor %}
{% if data.meta.externalFkTables %}
{% for tableIdentifier in data.meta.externalFkTables %}

        $this->addRelationshipRelatedLink(
            resource: $response,
            type: {{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }},
            id: $data->getId(),
            childType: '{{ tableIdentifier.name|lower }}',
        );
{% endfor %}
{% endif %}

        return $response;
    }

    /**
    * @param ResourceObject $resource
    * @param {{ data.attributes.objectName }}|null $dataObject
    * @return {{ data.attributes.objectName }}|null
    * @throws MinimalismException|Exception
    */
    public function ingestResource(
        ResourceObject $resource,
        ?ResourceableDataInterface $dataObject,
    ): ?ResourceableDataInterface
    {
        if ($dataObject === null) {
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.isNullable == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}
            if (!$resource->attributes->has(name: '{{ field.meta.FK.field }}')){
                throw new MinimalismException(status: HttpCode::PreconditionFailed, message: 'Required attribute {{ field.meta.FK.field  }} missing');
            }

{% else %}
            if (!$resource->attributes->has(name: '{{ field.attributes.name}}')){
                throw new MinimalismException(status: HttpCode::PreconditionFailed, message: 'Required attribute {{ field.attributes.name}} missing');
            }

{% endif %}
{% endif %}
{% endfor %}
            $response = new {{ data.attributes.objectName }}();
            if ($resource->id !== null) {
               $response->setId($resource->id);
            }
        } else {
            $response = $dataObject;
        }
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.isId == false and field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}
{% if field.meta.FK %}

        if ($resource->attributes->has(name: '{{ field.meta.FK.field }}')) {
            $response->set{{ field.meta.FK.fieldCapitalised }}({{ field.meta.FK.field }}: $resource->attributes->get(name: '{{ field.meta.FK.field }}'));
        }
{% else %}

        if ($resource->attributes->has(name: '{{ field.attributes.name}}')) {
            $response->set{{ field.meta.capitalisedName }}({{ field.attributes.name }}: $resource->attributes->get(name: '{{ field.attributes.name }}'));
        }
{% endif %}
{% endif %}
{% endfor %}

        return $response;
    }
}