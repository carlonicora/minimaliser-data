{% set imports = [] %}
{% set childTable = false %}
{% set parentTable = false %}
{% for childTableIdentifier in data.relationships['children'].data %}
{% if childTableIdentifier.id == data.meta.childTable %}
{% set childTable = lookupIncluded('table', childTableIdentifier.id, included) %}
{% if childTable.attributes.isComplete == false %}
{% for parentTableIdentifier in childTable.relationships['parents'].data %}
{% if parentTableIdentifier.id != data.id %}
{% set parentTable = lookupIncluded('table', parentTableIdentifier.id, included) %}
{% set break = true %}
{% endif %}
{% endfor %}
{% endif %}
{% set break = true %}
{% endif %}
{% endfor %}
{% if parentTable == false %}
{% set parentTable = childTable %}
{% endif %}
<?php
namespace {{ data.attributes.namespace }}Models\{{ data.attributes.objectNamePlural }};

use CarloNicora\Minimalism\Enums\HttpCode;
use CarloNicora\Minimalism\Interfaces\Encrypter\Parameters\PositionedEncryptedParameter;
use {{ data.attributes.namespace }}Models\Abstracts\Abstract{{ data.attributes.project }}Model;
{% if parentTable != false %}
use {{ data.attributes.namespace }}Data\{{ parentTable.attributes.objectNamePlural }}\Builders\{{ parentTable.attributes.objectName }}Builder;
{% if childTable.attributes.isComplete == false %}
{% set name = 'use ' ~ data.attributes.namespace ~ 'Data\\' ~ childTable.attributes.objectNamePlural ~ '\\IO\\' ~ childTable.attributes.objectName ~ 'IO;' %}{% set imports = imports|merge([ name ]) %}
{{ name }}
{% set name = 'use ' ~ data.attributes.namespace ~ 'Data\\' ~ data.attributes.objectNamePlural ~ '\\IO\\' ~ data.attributes.objectName ~ 'IO;' %}{% set imports = imports|merge([ name ]) %}
{{ name }}
{% endif %}
use {{ data.attributes.namespace }}Data\{{ childTable.attributes.objectNamePlural }}\DataObjects\{{ childTable.attributes.objectName }};
{% endif %}

{% set name = 'use ' ~ data.attributes.namespace ~ 'Data\\'~  data.attributes.objectNamePlural ~ '\\IO\\' ~ data.attributes.objectName ~ 'IO;' %}
{% if name not in imports %}
{{ name }}
{% set imports = imports|merge([ name ]) %}
{% endif %}
{% for cti in data.relationships['children'].data %}
{% set ct = lookupIncluded('table', cti.id, included) %}
{% set name = 'use ' ~ ct.attributes.namespace ~ 'Data\\' ~ ct.attributes.objectNamePlural ~ '\\IO\\' ~ ct.attributes.objectName ~ 'IO;' %}
{% if name not in imports %}
{{ name }}
{% set imports = imports|merge([ name ]) %}
{% endif %}
{% for pti in ct.relationships['parents'].data %}
{% set pt = lookupIncluded('table', pti.id, included) %}
{% set name = 'use ' ~ data.attributes.namespace ~ 'Data\\' ~ pt.attributes.objectNamePlural ~ '\\IO\\' ~ pt.attributes.objectName ~ 'IO;' %}
{% if name not in imports %}
{{ name }}
{% set imports = imports|merge([ name ]) %}
{% endif %}
{% endfor %}
{% endfor %}

use Exception;

class {{ childTable.attributes.objectNamePlural }} extends Abstract{{ data.attributes.project }}Model
{
    /**
     * @param PositionedEncryptedParameter ${{ data.attributes.primaryKey }}
     * @param array|null $page
     * @return HttpCode
     * @throws Exception
     */
    public function get(
        PositionedEncryptedParameter ${{ data.attributes.primaryKey }},
        ?array $page=null,
    ): HttpCode
    {
        ${{ parentTable.attributes.objectNamePlural | lower }} = $this->objectFactory->create({{ parentTable.attributes.objectName }}IO::class)->readBy{{ data.attributes.primaryKeyCapitalised }}(
            {{ data.attributes.primaryKey }}: ${{ data.attributes.primaryKey }}->getValue(),
            page: $page,
        );

        $this->document->addResourceList(
            $this->builder->buildResources(
                builderClass: {{ parentTable.attributes.objectName }}Builder::class,
                data: ${{ parentTable.attributes.objectNamePlural | lower }},
            )
        );

        $this->addPagination($page);

        return HttpCode::Ok;
    }
{% if childTable.attributes.isComplete == false %}
{% set tableLeft = false %}
{% set tableRight = false %}
{% for tableIdentifier in childTable.relationships['parents'].data %}{% set table = lookupIncluded('table', tableIdentifier.id, included) %}
{% if tableLeft == false %}
{% set tableLeft = table %}
{% else %}
{% set tableRight = table %}
{% endif %}
{% endfor %}

    /**
    * @param PositionedEncryptedParameter ${{ tableLeft.attributes.primaryKey }}
    * @param PositionedEncryptedParameter ${{ tableRight.attributes.primaryKey }}
    * @return HttpCode
    * @throws Exception
    */
    public function post(
        PositionedEncryptedParameter ${{ tableLeft.attributes.primaryKey }},
        PositionedEncryptedParameter ${{ tableRight.attributes.primaryKey }},
    ): HttpCode
    {
        ${{ tableLeft.attributes.objectName | lower }} = $this->objectFactory->create({{ tableLeft.attributes.objectName }}IO::class)->readById(${{ tableLeft.attributes.primaryKey }}->getValue());
        ${{ tableRight.attributes.objectName | lower }} = $this->objectFactory->create({{ tableRight.attributes.objectName }}IO::class)->readById(${{ tableRight.attributes.primaryKey }}->getValue());

        ${{ childTable.attributes.objectName | lower }} = new {{ childTable.attributes.objectName }}();
        ${{ childTable.attributes.objectName | lower }}->set{{ tableLeft.attributes.primaryKeyCapitalised }}(${{ tableLeft.attributes.objectName | lower }}->getId());
        ${{ childTable.attributes.objectName | lower }}->set{{ tableRight.attributes.primaryKeyCapitalised }}(${{ tableRight.attributes.objectName | lower }}->getId());

        /** @noinspection UnusedFunctionResultInspection */
        $this->objectFactory->create({{ childTable.attributes.objectName }}IO::class)->insert(${{ childTable.attributes.objectName | lower }});

        return HttpCode::Created;
    }

    /**
    * @param PositionedEncryptedParameter ${{ data.attributes.primaryKey }}
    * @param PositionedEncryptedParameter ${{ parentTable.attributes.primaryKey }}
    * @return HttpCode
    * @throws Exception
    */
    public function delete(
        PositionedEncryptedParameter ${{ data.attributes.primaryKey }},
        PositionedEncryptedParameter ${{ parentTable.attributes.primaryKey }},
    ): HttpCode
    {
{% set first = false %}
{% set second = false %}
{% if tableLeft.id == data.id%}
{% set first = data %}
{% set second = parentTable %}
{% else %}
{% set first = parentTable %}
{% set second = data %}
{% endif %}
        ${{ childTable.attributes.objectName | lower }} = $this->objectFactory->create({{ childTable.attributes.objectName }}IO::class)->readBy{{ first.attributes.primaryKeyCapitalised }}{{ second.attributes.primaryKeyCapitalised }}(
            {{ first.attributes.primaryKey }}: ${{ first.attributes.primaryKey }}->getValue(),
            {{ second.attributes.primaryKey }}: ${{ second.attributes.primaryKey }}->getValue(),
        );

        $this->objectFactory->create({{ childTable.attributes.objectName }}IO::class)->deleteById(${{ childTable.attributes.objectName | lower }}->getId());

        return HttpCode::NoContent;
    }
{% endif %}
}