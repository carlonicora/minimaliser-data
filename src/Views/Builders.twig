<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\Builders;

use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\JsonApi\Objects\ResourceObject;
use CarloNicora\Minimalism\Enums\HttpCode;
use {{ data.attributes.namespace }}Data\Abstracts\Abstract{{ data.attributes.project }}ResourceBuilder;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\DataObjects\{{ data.attributes.objectName }};
use {{ data.attributes.namespace }}Enums\{{ data.attributes.project }}Dictionary;
use CarloNicora\Minimalism\Services\ResourceBuilder\Interfaces\ResourceableDataInterface;
use CarloNicora\Minimalism\Exceptions\MinimalismException;
use Exception;

class {{ data.attributes.objectName }}Builder extends Abstract{{ data.attributes.project }}ResourceBuilder
{
    /**
     * @param {{ data.attributes.objectName }} $data
     * @return ResourceObject
     * @throws Exception
     */
    public function buildResource(
        ResourceableDataInterface $data,
    ): ResourceObject
    {
        $this->data = $data;

        $response = $this->create({{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }});

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}
                $response->attributes->add(
                        name: '{{ field.id }}',
                        value: $data->get{{ field.meta.capitalisedName }}(),
                );

{% endif %}{% endfor %}
                return $response;
        }

        /**
        * @param ResourceObject $resource
        * @param {{ data.attributes.objectName }}|null $dataObject
        * @return {{ data.attributes.objectName }}|null
        * @throws MinimalismException|Exception
        */
        public function ingestResource(
                ResourceObject $resource,
                ?ResourceableDataInterface $dataObject,
        ): ?ResourceableDataInterface
        {
                if ($dataObject === null) {
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false and field.attributes.isNullable == false %}
                        if (!$resource->attributes->has(name: '{{ field.id}}')){
                                throw new MinimalismException(status: HttpCode::PreconditionFailed, message: 'Required attribute {{ field.id}} missing');
                        }

{% endif %}{% endfor %}
                        $response = new {{ data.attributes.objectName }}();
                        $response->setId($this->encrypter->decryptId($resource->id));
                } else {
                        $response = $dataObject;
                }

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.isId == false%}
                if ($resource->attributes->has(name: '{{ field.id}}')) {
                        $response->set{{ field.meta.capitalisedName }}({{ field.id }}: $resource->attributes->get(name: '{{ field.id }}'));
                }

{% endif %}{% endfor %}

                return $response;
        }
}