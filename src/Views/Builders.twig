<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\Builders;

use CarloNicora\JsonApi\Objects\Link;
use CarloNicora\JsonApi\Objects\ResourceObject;
use {{ data.attributes.namespace }}Data\Abstracts\Abstract{{ data.attributes.project }}ResourceBuilder;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\DataObjects\{{ data.attributes.objectName }};
use {{ data.attributes.namespace }}Enums\{{ data.attributes.project }}Dictionary;
use CarloNicora\Minimalism\Services\ResourceBuilder\Interfaces\ResourceableDataInterface;
use Exception;

class {{ data.attributes.objectName }}Builder extends Abstract{{ data.attributes.project }}ResourceBuilder
{
    /**
     * @param {{ data.attributes.objectName }} $data
     * @return ResourceObject
     * @throws Exception
     */
    public function buildResource(
        ResourceableDataInterface $data,
    ): ResourceObject
    {
        $this->data = $data;

        $response = $this->create({{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }});

{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
        $response->attributes->add(
                name: '{{ field.id }}',
                value: $data->get{{ field.meta.capitalisedName }}(),
        );

{% endfor %}

        return $response;
}
}