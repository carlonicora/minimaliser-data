{% set functions = [] %}
<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\Abstracts;

use CarloNicora\Minimalism\Exceptions\MinimalismException;
use CarloNicora\Minimalism\Interfaces\Sql\Factories\SqlJoinFactory;
use CarloNicora\Minimalism\Interfaces\Sql\Factories\SqlQueryFactory;
use {{ data.attributes.namespace }}Data\Abstracts\Abstract{{ data.attributes.project }}SqlIO;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectNamePlural }}Table;
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated\{{ data.attributes.objectName }};
{% if data.attributes.isComplete == true and data.attributes.isManyToMany == false %}
use {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\{{ data.attributes.objectNamePlural }}CacheFactory;
{% endif %}
use Exception;
{% set childTable = false %}
{% set parentTable = false %}
{% for childTableIdentifier in data.relationships['children'].data %}{% set childTable = lookupIncluded('table', childTableIdentifier.id, included) %}
use {{ data.attributes.namespace }}Data\{{ childTable.attributes.objectNamePlural }}\AutoGenerated\{{ childTable.attributes.objectNamePlural }}Table;
{% endfor %}
{% for tableIdentifier in data.relationships['parents'].data %}{% set table = lookupIncluded('table', tableIdentifier.id, included) %}
use {{ data.attributes.namespace }}Data\{{ table.attributes.objectNamePlural }}\AutoGenerated\{{ table.attributes.objectNamePlural }}Table;
{% endfor %}

abstract class Abstract{{ data.attributes.objectName }}IO extends Abstract{{ data.attributes.project }}SqlIO
{
    /**
     * @param int $id
     * @return {{ data.attributes.objectName }}
     * @throws MinimalismException
     */
    public function readById(
        int $id,
    ): {{ data.attributes.objectName }}
    {
        $factory = SqlQueryFactory::create({{ data.attributes.objectNamePlural }}Table::class)
            ->addParameter({{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }}, $id);

        return $this->data->read(
            queryFactory: $factory,
{% if data.attributes.isComplete == true and data.attributes.isManyToMany == false %}
            cacheBuilder: {{ data.attributes.objectNamePlural }}CacheFactory::{{ data.attributes.objectName | lower }}($id),
{% endif %}
            responseType: {{ data.attributes.objectName }}::class,
        );
    }
{% if data.attributes.isComplete == true %}

    /**
     * @param array|null $page
     * @return {{ data.attributes.objectName }}[]
     * @throws MinimalismException
     */
    public function readList(
        ?array $page=null,
    ): array
    {
        $factory = SqlQueryFactory::create({{ data.attributes.objectNamePlural }}Table::class);

        $this->addPagination($factory, $page, {{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }});

        return $this->data->read(
            queryFactory: $factory,
            responseType: {{ data.attributes.objectName }}::class,
            requireObjectsList: true,
        );
    }
{% endif %}

    /**
     * @param {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower }}
     * @return {{ data.attributes.objectName }}
     * @throws Exception
     */
    public function insert(
        {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower}},
    ): {{ data.attributes.objectName }}
    {
        return $this->data->create(
            queryFactory: ${{ data.attributes.objectName | lower}},
            responseType: {{ data.attributes.objectName }}::class,
        );
    }

    /**
     * @param int $id
     * @return void
     * @throws MinimalismException
     */
    public function deleteById(
        int $id,
    ): void
    {
        $factory = SqlQueryFactory::create({{ data.attributes.objectNamePlural }}Table::class)
            ->delete()
            ->addParameter(field: {{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }}, value: $id);

        $this->data->delete(
            queryFactory: $factory,
{% if data.attributes.isComplete == true and data.attributes.isManyToMany == false %}
            cacheBuilder: {{ data.attributes.objectNamePlural }}CacheFactory::{{ data.attributes.objectName | lower }}($id),
{% endif %}
        );
    }
{% if data.attributes.isComplete %}

    /**
     * @param {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower }}
     * @return void
     */
    public function update{{ data.attributes.objectName }}(
        {{ data.attributes.objectName }} ${{ data.attributes.objectName | lower }},
    ): void
    {
        $this->data->update(
            queryFactory: ${{ data.attributes.objectName | lower }},
{% if data.attributes.isComplete == true and data.attributes.isManyToMany == false %}
            cacheBuilder: {{ data.attributes.objectNamePlural }}CacheFactory::{{ data.attributes.objectName | lower }}(${{ data.attributes.objectName | lower }}->getId()),
{% endif %}
        );
    }
{% endif %}
{% if data.attributes.isManyToMany %}
{% set foreignKey1 = false %}
{% set foreignKey2 = false %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.FK %}
{% if foreignKey1 == false %}
    {% set foreignKey1 = field.meta.FK %}
{% else %}
    {% set foreignKey2 = field.meta.FK %}
{% endif %}
{% endif %}
{% endfor %}
{% if foreignKey1 != false and foreignKey2 != false %}
{% include 'Components/manyToManyReadForeignByForeign.twig' with {'primaryKey': data.attributes.primaryKey, 'objectName': data.attributes.objectName, 'tableName': data.attributes.objectNamePlural, 'foreignLeft': foreignKey1, 'foreignRight': foreignKey2} %}

{% include 'Components/manyToManyReadForeignByForeign.twig' with {'primaryKey': data.attributes.primaryKey, 'objectName': data.attributes.objectName, 'tableName': data.attributes.objectNamePlural, 'foreignLeft': foreignKey2, 'foreignRight': foreignKey1} %}

{% endif %}
{% else %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}
{% if field.meta.FK %}

    /**
     * @param int ${{ field.meta.FK.field }}
     * @param array|null $page
     * @return {{ data.attributes.objectName }}[]
     * @throws MinimalismException
     */
    public function readBy{{ field.meta.FK.fieldCapitalised }}(
        int ${{ field.meta.FK.field }},
        ?array $page=null,
    ): array
    {
        $factory = SqlQueryFactory::create({{ data.attributes.objectNamePlural }}Table::class)
            ->addParameter({{ data.attributes.objectNamePlural }}Table::{{ field.meta.FK.table }}_{{ field.meta.FK.field }}, ${{ field.meta.FK.field }});

        $this->addPagination($factory, $page, {{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }});

        return $this->data->read(
            queryFactory: $factory,
            responseType: {{ data.attributes.objectName }}::class,
            requireObjectsList: true,
        );
    }
{% endif %}
{% endfor %}
{% endif %}
{% for externalTableIdentifier in data.meta.externalFkTables %}
{% if externalTableIdentifier.manyToMany %}

    /**
    * @param int ${{ externalTableIdentifier.primaryKey }}
    * @param array|null $page
    * @return {{ data.attributes.objectName }}[]
    * @throws MinimalismException
    */
    public function readBy{{ externalTableIdentifier.primaryKeyCapitalised }}(
        int ${{ externalTableIdentifier.primaryKey }},
        ?array $page=null,
    ): array
    {
        $factory = SqlQueryFactory::create({{ data.attributes.objectNamePlural }}Table::class)
            ->addJoin(SqlJoinFactory::create({{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }}, {{ externalTableIdentifier.manyToManyObjectPlural }}Table::{{ data.attributes.tableName }}_{{ data.attributes.primaryKey }}))
            ->addParameter({{ externalTableIdentifier.manyToManyObjectPlural }}Table::{{ externalTableIdentifier.name }}_{{ externalTableIdentifier.primaryKey }}, ${{ externalTableIdentifier.primaryKey }});

        $this->addPagination($factory, $page, {{ data.attributes.objectNamePlural }}Table::{{ data.attributes.primaryKey }});

        return $this->data->read(
            queryFactory: $factory,
            responseType: {{ data.attributes.objectName }}::class,
            requireObjectsList: true,
        );
    }
{% endif %}
{% endfor %}
}