
    /**
     * @param int ${{ foreignLeft.field }}
     * @param array|null $page
     * @return array
     * @throws Exception
     */
    public function read{{ foreignRight.fieldCapitalised }}sBy{{ foreignLeft.fieldCapitalised }}(
        int ${{ foreignLeft.field }},
        ?array $page=null,
    ): array {
        $factory = SqlQueryFactory::create({{ tableName }}Table::class)
            ->addParameter({{ tableName }}Table::{{ foreignLeft.table }}_{{ foreignLeft.field }}, ${{ foreignLeft.field }});

        $this->addPagination($factory, $page, {{ tableName }}Table::{{ primaryKey }});

        $response = [];

        /** @var {{ objectName }}[] $recordset */
        $recordset = $this->data->read(
            queryFactory: $factory,
            responseType: {{ objectName }}::class,
            requireObjectsList: true,
        );

        foreach ($recordset as $record){
            $response[] = $record->get{{ foreignRight.fieldCapitalised }}();
        }

        return $response;
    }

    /**
     * @param int ${{ foreignRight.field }}
     * @param int ${{ foreignLeft.field }}
     * @return void
     * @throws MinimalismException
     */
    public function deleteBy{{ foreignRight.fieldCapitalised }}{{ foreignLeft.fieldCapitalised }}(
        int ${{ foreignRight.field }},
        int ${{ foreignLeft.field }},
    ): void {
        $factory = SqlQueryFactory::create({{ tableName }}Table::class)
            ->delete()
            ->addParameter({{ tableName }}Table::{{ foreignRight.table }}_{{ foreignRight.field }}, ${{ foreignRight.field }})
            ->addParameter({{ tableName }}Table::{{ foreignLeft.table }}_{{ foreignLeft.field }}, ${{ foreignLeft.field }});

        $this->data->delete($factory);
    }