<?php
namespace {{ data.attributes.namespace }}Data\{{ data.attributes.objectNamePlural }}\AutoGenerated;

use CarloNicora\Minimalism\Interfaces\Sql\Attributes\DbField;
use CarloNicora\Minimalism\Interfaces\Sql\Attributes\DbTable;
{% set hasDbFieldType = false %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.meta.DbFieldType %}{% set hasDbFieldType = true%}{% endif %}{% endfor %}
{% if hasDbFieldType == true %}
use CarloNicora\Minimalism\Interfaces\Sql\Enums\DbFieldType;
{% endif %}
use {{ data.attributes.namespace }}Data\Abstracts\Abstract{{ data.attributes.project }}DataObject;
use {{ data.attributes.namespace }}Enums\{{ data.attributes.project }}Dictionary;

#[DbTable(tableClass: {{ data.attributes.objectNamePlural }}Table::class)]
class {{ data.attributes.objectName }} extends Abstract{{ data.attributes.project }}DataObject
{
{% if data.attributes.isManyToMany == false %}
    /** @var {{ data.attributes.project }}Dictionary  */
    protected {{ data.attributes.project }}Dictionary $type = {{ data.attributes.project }}Dictionary::{{ data.attributes.objectName }};
{% endif %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}

    /** @var {{ field.attributes.phpType }}{% if field.attributes.isNullable == true%}|null{% endif %}  */
    #[DbField(field: {{ data.attributes.objectNamePlural }}Table::{{ field.attributes.name }}{% if field.meta.DbFieldType %}, fieldType: {{field.meta.DbFieldType}}{% endif %})]
    protected {% if field.attributes.isNullable == true%}?{% endif %}{{ field.attributes.phpType }} ${% if field.meta.isId == true%}id{% else %}{{ field.attributes.name }}{% endif %}{% if field.attributes.isNullable == true%}=null{% endif %};
{% endif %}{% endfor %}
{% for fieldIdentifier in data.relationships['fields'].data %}{% set field = lookupIncluded('field', fieldIdentifier.id, included) %}{%if field.meta.isId == false%}{% if field.attributes.name != 'updatedAt' and field.attributes.name != 'createdAt'%}

    /** @return {{ field.attributes.phpType }}{% if field.attributes.isNullable == true%}|null{% endif %} */
    public function get{{ field.meta.capitalisedName }}(): {% if field.attributes.isNullable == true%}?{% endif %}{{ field.attributes.phpType }}{return $this->{{field.attributes.name}};}

    /*** @param {{ field.attributes.phpType }}{% if field.attributes.isNullable == true%}|null{% endif %} ${{field.attributes.name}} */
    public function set{{ field.meta.capitalisedName }}({% if field.attributes.isNullable == true%}?{% endif %}{{ field.attributes.phpType }} ${{field.attributes.name}}): void{$this->{{field.attributes.name}} = ${{field.attributes.name}};}
{% endif %}{% endif %}{% endfor %}
}